// ATtiny85 grain player
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

#define F_CPU 8000000UL
#define MS_TO_NOP(ms) (((F_CPU / 1000) * ms) / 6 ) - 4000 // approximation

// raw headerless unsigned 8 bit PCM data 
const uint8_t chirp[] PROGMEM = {
0x80, 0xA4, 0x39, 0xE2, 0x09, 0xFF, 0x03, 0xEE, 0x2A, 0xB4, 0x72, 0x64, 0xC1, 0x1F, 0xF6, 0x00, 
0xFB, 0x16, 0xCB, 0x5B, 0x79, 0xB1, 0x29, 0xF1, 0x01, 0xFC, 0x15, 0xCA, 0x5E, 0x73, 0xB9, 0x20, 
0xF7, 0x00, 0xF6, 0x24, 0xB3, 0x7C, 0x53, 0xD6, 0x0B, 0xFF, 0x08, 0xDC, 0x4D, 0x80, 0xB2, 0x22, 
0xF8, 0x00, 0xF0, 0x31, 0x9D, 0x98, 0x35, 0xEE, 0x00, 0xF8, 0x25, 0xAB, 0x8C, 0x3E, 0xEA, 0x01, 
0xF9, 0x24, 0xAA, 0x8F, 0x39, 0xEF, 0x00, 0xF5, 0x2F, 0x9A, 0xA2, 0x28, 0xF8, 0x01, 0xE7, 0x48, 
0x7A, 0xC1, 0x11, 0xFF, 0x0D, 0xC8, 0x74, 0x4C, 0xE6, 0x01, 0xF6, 0x30, 0x92, 0xAF, 0x1B, 0xFE, 
0x09, 0xCC, 0x72, 0x4A, 0xE9, 0x00, 0xF1, 0x3E, 0x7E, 0xC4, 0x0C, 0xFF, 0x1B, 0xAA, 0x9C, 0x25, 
0xFD, 0x08, 0xCC, 0x78, 0x40, 0xF1, 0x00, 0xE2, 0x5B, 0x59, 0xE3, 0x00, 0xEF, 0x47, 0x6D, 0xD7, 
0x02, 0xF6, 0x3B, 0x79, 0xCF, 0x05, 0xF8, 0x36, 0x7E, 0xCC, 0x05, 0xF9, 0x37, 0x7C, 0xCF, 0x04, 
0xF6, 0x3E, 0x72, 0xD8, 0x01, 0xF0, 0x4C, 0x61, 0xE4, 0x00, 0xE4, 0x61, 0x4A, 0xF2, 0x02, 0xD0, 
0x7F, 0x2F, 0xFD, 0x0E, 0xB1, 0xA4, 0x15, 0xFF, 0x27, 0x87, 0xCC, 0x03, 0xF1, 0x50, 0x55, 0xEE, 
0x02, 0xCE, 0x88, 0x25, 0xFF, 0x1B, 0x96, 0xC3, 0x04, 0xF2, 0x51, 0x52, 0xF2, 0x05, 0xC1, 0x9A, 
0x17, 0xFE, 0x30, 0x74, 0xE0, 0x00, 0xD8, 0x80, 0x26, 0xFF, 0x21, 0x86, 0xD5, 0x00, 0xE0, 0x77, 
0x2B, 0xFF, 0x20, 0x86, 0xD7, 0x00, 0xDB, 0x80, 0x23, 0xFF, 0x2B, 0x74, 0xE4, 0x01, 0xC8, 0x9B, 
0x11, 0xFA, 0x47, 0x51, 0xF7, 0x0D, 0xA2, 0xC3, 0x01, 0xE4, 0x78, 0x25, 0xFF, 0x31, 0x68, 0xEE, 
0x06, 0xB0, 0xBA, 0x03, 0xE7, 0x75, 0x25, 0xFF, 0x36, 0x5E, 0xF4, 0x0C, 0x9F, 0xCC, 0x00, 0xD5, 
0x93, 0x11, 0xF7, 0x59, 0x38, 0xFF, 0x28, 0x6C, 0xEF, 0x09, 0xA2, 0xCC, 0x00, 0xCF, 0x9F, 0x0A, 
0xEF, 0x6F, 0x24, 0xFE, 0x43, 0x49, 0xFD, 0x21, 0x72, 0xEE, 0x0A, 0x9A, 0xD5, 0x00, 0xBE, 0xB7, 
0x01, 0xDA, 0x95, 0x0C, 0xEE, 0x75, 0x1D, 0xFB, 0x57, 0x32, 0xFF, 0x3E, 0x49, 0xFE, 0x29, 0x61, 
0xF8, 0x19, 0x77, 0xEF, 0x0E, 0x8C, 0xE4, 0x06, 0x9E, 0xD8, 0x02, 0xAD, 0xCD, 0x00, 0xB9, 0xC2, 
0x00, 0xC3, 0xB9, 0x00, 0xCB, 0xB1, 0x01, 0xD0, 0xAB, 0x02, 0xD4, 0xA8, 0x02, 0xD6, 0xA6, 0x03, 
0xD6, 0xA6, 0x02, 0xD4, 0xA9, 0x02, 0xD1, 0xAE, 0x01, 0xCC, 0xB4, 0x00, 0xC5, 0xBD, 0x00, 0xBC, 
0xC7, 0x00, 0xB0, 0xD2, 0x02, 0xA2, 0xDD, 0x07, 0x91, 0xE9, 0x0F, 0x7D, 0xF3, 0x1A, 0x68, 0xFB, 
0x2A, 0x51, 0xFF, 0x3E, 0x3A, 0xFE, 0x57, 0x24, 0xF8, 0x74, 0x11, 0xEA, 0x93, 0x05, 0xD4, 0xB4, 
0x00, 0xB6, 0xD2, 0x04, 0x93, 0xEB, 0x14, 0x6B, 0xFB, 0x30, 0x44, 0xFF, 0x55, 0x21, 0xF4, 0x82, 
0x09, 0xDA, 0xB0, 0x00, 0xB2, 0xD9, 0x09, 0x81, 0xF5, 0x25, 0x4D, 0xFF, 0x52, 0x21, 0xF3, 0x89, 
0x05, 0xCF, 0xC1, 0x01, 0x99, 0xEC, 0x19, 0x5C, 0xFF, 0x49, 0x26, 0xF4, 0x89, 0x04, 0xCA, 0xC8, 
0x04, 0x8B, 0xF4, 0x26, 0x47, 0xFF, 0x65, 0x12, 0xE2, 0xAE, 0x00, 0xA4, 0xE8, 0x19, 0x57, 0xFF, 
0x58, 0x18, 0xE7, 0xA7, 0x00, 0xA6, 0xE8, 0x1A, 0x54, 0xFF, 0x60, 0x12, 0xDF, 0xB5, 0x01, 0x93, 
0xF3, 0x2A, 0x3C, 0xFB, 0x7E, 0x05, 0xC5, 0xD4, 0x0C, 0x6A, 0xFF, 0x51, 0x19, 0xE4, 0xB1, 0x01, 
0x90, 0xF6, 0x32, 0x31, 0xF5, 0x93, 0x00, 0xAB, 0xE9, 0x20, 0x44, 0xFC, 0x7F, 0x03, 0xBB, 0xE0, 
0x17, 0x50, 0xFE, 0x75, 0x06, 0xC1, 0xDC, 0x15, 0x52, 0xFE, 0x76, 0x05, 0xBE, 0xDF, 0x18, 0x4B, 
0xFD, 0x80, 0x02, 0xB2, 0xE9, 0x23, 0x3B, 0xF7, 0x95, 0x00, 0x9B, 0xF5, 0x38, 0x25, 0xE9, 0xB3, 
0x03, 0x79, 0xFE, 0x59, 0x0E, 0xCE, 0xD6, 0x14, 0x4E, 0xFC, 0x88, 0x00, 0xA1, 0xF4, 0x39, 0x22, 
0xE4, 0xBE, 0x08, 0x65, 0xFF, 0x73, 0x03, 0xB0, 0xEE, 0x2F, 0x28, 0xE8, 0xBA, 0x07, 0x66, 0xFF, 
0x77, 0x02, 0xA8, 0xF3, 0x3A, 0x1E, 0xDD, 0xCB, 0x10, 0x4F, 0xFB, 0x94, 0x00, 0x88, 0xFD, 0x5B, 
0x09, 0xBD, 0xE9, 0x2D, 0x27, 0xE4, 0xC4, 0x0D, 0x50, 0xFA, 0x98, 0x00, 0x7E, 0xFF, 0x6B, 0x03, 
0xA9, 0xF5, 0x43, 0x13, 0xCC, 0xE0, 0x24, 0x2C, 0xE6, 0xC4, 0x0F, 0x4A, 0xF7, 0xA6, 0x03, 0x68, 
0xFE, 0x89, 0x00, 0x84, 0xFF, 0x6D, 0x02, 0x9E, 0xFA, 0x56, 0x08, 0xB3, 0xF2, 0x43, 0x11, 0xC4, 
0xE9, 0x33, 0x1B, 0xD2, 0xDF, 0x28, 0x24, 0xDC, 0xD6, 0x20, 0x2D, 0xE3, 0xCF, 0x1A, 0x33, 0xE7, 
0xC9, 0x16, 0x38, 0xEA, 0xC6, 0x15, 0x39, 0xEB, 0xC5, 0x14, 0x39, 0xEA, 0xC7, 0x16, 0x36, 0xE7, 
0xCB, 0x19, 0x31, 0xE3, 0xD2, 0x1F, 0x29, 0xDC, 0xDA, 0x27, 0x21, 0xD3, 0xE3, 0x32, 0x17, 0xC6, 
0xED, 0x41, 0x0E, 0xB5, 0xF6, 0x53, 0x06, 0xA1, 0xFC, 0x6A, 0x00, 0x89, 0xFF, 0x84, 0x00, 0x6D, 
0xFD, 0xA0, 0x06, 0x50, 0xF3, 0xBE, 0x14, 0x33, 0xE1, 0xD9, 0x2B, 0x19, 0xC5, 0xF0, 0x4B, 0x07, 
0xA1, 0xFD, 0x73, 0x00, 0x77, 0xFE, 0x9E, 0x06, 0x4B, 0xEF, 0xC8, 0x1E, 0x24, 0xD0, 0xEB, 0x45, 
0x09, 0xA2, 0xFE, 0x77, 0x00, 0x6C, 0xFB, 0xAE, 0x0E, 0x38, 0xE1, 0xDE, 0x34, 0x10, 0xB0, 0xFB, 
0x6D, 0x00, 0x72, 0xFC, 0xAD, 0x0F, 0x35, 0xDD, 0xE3, 0x3D, 0x0A, 0xA3, 0xFE, 0x80, 0x01, 0x5B, 
0xF4, 0xC5, 0x1F, 0x1E, 0xC3, 0xF5, 0x60, 0x00, 0x78, 0xFD, 0xAE, 0x11, 0x2E, 0xD4, 0xEC, 0x4E, 
0x03, 0x88, 0xFF, 0xA2, 0x0C, 0x36, 0xDA, 0xE8, 0x49, 0x04, 0x8A, 0xFF, 0xA3, 0x0D, 0x33, 0xD6, 
0xEC, 0x51, 0x02, 0x7F, 0xFD, 0xB0, 0x14, 0x26, 0xC8, 0xF5, 0x65, 0x00, 0x67, 0xF6, 0xC8, 0x27, 
0x13, 0xAC, 0xFE, 0x88, 0x04, 0x44, 0xE2, 0xE5, 0x49, 0x03, 0x80, 0xFD, 0xB5, 0x1A, 0x1D, 0xB9, 
0xFC, 0x7D, 0x02, 0x49, 0xE4, 0xE4, 0x4A, 0x02, 0x7B, 0xFB, 0xBE, 0x22, 0x14, 0xAA, 0xFF, 0x92, 
0x09, 0x33, 0xD0, 0xF4, 0x68, 0x00, 0x57, 0xEB, 0xDE, 0x44, 0x03, 0x7C, 0xFA, 0xC3, 0x28, 0x0F, 
0x9C, 0xFF, 0xA6, 0x14, 0x20, 0xB8, 0xFD, 0x8B, 0x08, 0x33, 0xCE, 0xF6, 0x73, 0x02, 0x46, 0xDE, 
0xED, 0x5F, 0x00, 0x58, 0xE9, 0xE3, 0x4F, 0x00, 0x66, 0xF0, 0xDA, 0x44, 0x02, 0x71, 0xF5, 0xD3, 
0x3C, 0x03, 0x78, 0xF7, 0xCF, 0x38, 0x05, 0x7C, 0xF8, 0xCD, 0x37, 0x05, 0x7C, 0xF8, 0xCE, 0x39, 
0x04, 0x78, 0xF6, 0xD2, 0x3E, 0x02, 0x71, 0xF3, 0xD9, 0x46, 0x01, 0x66, 0xED, 0xE2, 0x52, 0x00, 
0x58, 0xE5, 0xEB, 0x63, 0x00, 0x47, 0xD8, 0xF5, 0x77, 0x05, 0x34, 0xC6, 0xFC, 0x8F, 0x0E, 0x21, 
0xAF, 0xFF, 0xAA, 0x1D, 0x10, 0x92, 0xFD, 0xC6, 0x35, 0x04, 0x71, 0xF1, 0xE0, 0x54, 0x00, 0x4D, 
0xDB, 0xF5, 0x7A, 0x07, 0x2B, 0xBA, 0xFF, 0xA5, 0x1C, 0x10, 0x8F, 0xFB, 0xCD, 0x3F, 0x01, 0x5F, 
0xE6, 0xEE, 0x6E, 0x04, 0x31, 0xBE, 0xFF, 0xA4, 0x1C, 0x0E, 0x8A, 0xF9, 0xD5, 0x4A, 0x00, 0x4F, 
0xD9, 0xF7, 0x85, 0x0D, 0x1D, 0xA3, 0xFE, 0xC3, 0x37, 0x02, 0x61, 0xE4, 0xF1, 0x78, 0x08, 0x25, 
0xAC, 0xFF, 0xBD, 0x33, 0x02, 0x63, 0xE5, 0xF1, 0x7A, 0x09, 0x21, 0xA6, 0xFE, 0xC5, 0x3C, 0x00, 
0x55, 0xDB, 0xF8, 0x8C, 0x12, 0x14, 0x8F, 0xF9, 0xDA, 0x55, 0x00, 0x3A, 0xC2, 0xFF, 0xAE, 0x29, 
0x04, 0x68, 0xE6, 0xF2, 0x80, 0x0D, 0x19, 0x95, 0xFA, 0xD8, 0x55, 0x01, 0x36, 0xBC, 0xFF, 0xB9, 
0x34, 0x01, 0x57, 0xD8, 0xFA, 0x98, 0x1C, 0x0A, 0x76, 0xEC, 0xEE, 0x7B, 0x0C, 0x18, 0x91, 0xF8, 
0xDF, 0x62, 0x04, 0x28, 0xA8, 0xFD, 0xD0, 0x4E, 0x00, 0x36, 0xB9, 0xFF, 0xC2, 0x40, 0x00, 0x43, 
0xC4, 0xFF, 0xB7, 0x36, 0x00, 0x4C, 0xCC, 0xFE, 0xB0, 0x31, 0x01, 0x51, 0xD0, 0xFE, 0xAD, 0x2F, 
0x01, 0x52, 0xD0, 0xFE, 0xAE, 0x30, 0x01, 0x4F, 0xCD, 0xFF, 0xB4, 0x35, 0x00, 0x47, 0xC6, 0xFF, 
0xBD, 0x3E, 0x00, 0x3D, 0xBA, 0xFF, 0xC9, 0x4C, 0x01, 0x2F, 0xAB, 0xFD, 0xD7, 0x5E, 0x05, 0x20, 
0x96, 0xF6, 0xE7, 0x76, 0x0E, 0x11, 0x7C, 0xEA, 0xF4, 0x92, 0x1E, 0x05, 0x5E, 0xD6, 0xFE, 0xB1, 
0x37, 0x00, 0x3E, 0xB9, 0xFF, 0xD0, 0x58, 0x04, 0x20, 0x93, 0xF4, 0xEB, 0x81, 0x15, 0x09, 0x68, 
0xDB, 0xFD, 0xAE, 0x36, 0x00, 0x3C, 0xB4, 0xFE, 0xD8, 0x64, 0x08, 0x16, 0x81, 0xEA, 0xF6, 0x9A, 
0x27, 0x01, 0x4A, 0xC1, 0xFF, 0xCF, 0x5A, 0x05, 0x1A, 0x86, 0xEC, 0xF5, 0x99, 0x27, 0x01, 0x47, 
0xBD, 0xFF, 0xD5, 0x63, 0x09, 0x13, 0x79, 0xE4, 0xFB, 0xAA, 0x36, 0x00, 0x34, 0xA7, 0xF9, 0xE7, 
0x7F, 0x17, 0x06, 0x59, 0xCB, 0xFF, 0xCB, 0x59, 0x06, 0x17, 0x7D, 0xE5, 0xFB, 0xAD, 0x3A, 0x00, 
0x2C, 0x9C, 0xF4, 0xEF, 0x91, 0x25, 0x01, 0x42, 0xB4, 0xFC, 0xE2, 0x79, 0x16, 0x06, 0x55, 0xC6, 
0xFF, 0xD5, 0x67, 0x0D, 0x0C, 0x65, 0xD2, 0xFF, 0xCA, 0x5B, 0x08, 0x11, 0x6F, 0xD9, 0xFF, 0xC3, 
0x54, 0x06, 0x15, 0x74, 0xDC, 0xFE, 0xC0, 0x52, 0x05, 0x15, 0x75, 0xDC, 0xFE, 0xC2, 0x54, 0x07, 
0x13, 0x70, 0xD8, 0xFF, 0xC8, 0x5C, 0x0A, 0x0E, 0x66, 0xD0, 0xFF, 0xD2, 0x68, 0x10, 0x08, 0x57, 
0xC3, 0xFE, 0xDE, 0x7A, 0x1A, 0x02, 0x44, 0xB0, 0xF9, 0xEC, 0x92, 0x2A, 0x00, 0x2F, 0x97, 0xEF, 
0xF8, 0xAD, 0x42, 0x02, 0x1A, 0x78, 0xDC, 0xFF, 0xCA, 0x62, 0x0E, 0x09, 0x55, 0xBF, 0xFD, 0xE5, 
0x88, 0x25, 0x00, 0x31, 0x98, 0xEE, 0xF9, 0xB2, 0x49, 0x05, 0x13, 0x69, 0xCF, 0xFF, 0xDA, 0x79, 
0x1C, 0x01, 0x3A, 0xA1, 0xF1, 0xF7, 0xAE, 0x47, 0x04, 0x13, 0x68, 0xCD, 0xFF, 0xDE, 0x80, 0x22, 
0x00, 0x30, 0x94, 0xEA, 0xFC, 0xBE, 0x58, 0x0B, 0x09, 0x52, 0xB8, 0xFA, 0xEF, 0x9D, 0x39, 0x01, 
0x19, 0x71, 0xD2, 0xFF, 0xDD, 0x80, 0x23, 0x00, 0x2B, 0x8B, 0xE4, 0xFE, 0xCB, 0x69, 0x15, 0x02, 
0x3C, 0x9F, 0xEE, 0xFB, 0xBC, 0x59, 0x0D, 0x07, 0x49, 0xAC, 0xF4, 0xF7, 0xB1, 0x4E, 0x09, 0x0A, 
0x51, 0xB4, 0xF7, 0xF4, 0xAC, 0x4A, 0x07, 0x0B, 0x54, 0xB5, 0xF8, 0xF4, 0xAC, 0x4B, 0x08, 0x0A, 
0x51, 0xB2, 0xF6, 0xF6, 0xB2, 0x51, 0x0B, 0x07, 0x48, 0xA9, 0xF2, 0xFA, 0xBD, 0x5D, 0x11, 0x03, 
0x3B, 0x9A, 0xE9, 0xFE, 0xCC, 0x6F, 0x1C, 0x00, 0x2B, 0x84, 0xDB, 0xFF, 0xDD, 0x88, 0x2D, 0x00, 
0x19, 0x69, 0xC6, 0xFC, 0xEF, 0xA5, 0x47, 0x08, 0x09, 0x4A, 0xA8, 0xF0, 0xFC, 0xC5, 0x6A, 0x1A, 
0x00, 0x2A, 0x81, 0xD7, 0xFF, 0xE4, 0x94, 0x39, 0x03, 0x0F, 0x55, 0xB1, 0xF4, 0xFA, 0xC0, 0x65, 
0x18, 0x00, 0x2A, 0x80, 0xD5, 0xFF, 0xE7, 0x9B, 0x40, 0x06, 0x0A, 0x49, 0xA4, 0xEC, 0xFE, 0xD0, 
0x7A, 0x26, 0x00, 0x19, 0x66, 0xBF, 0xF8, 0xF6, 0xB9, 0x60, 0x16, 0x00, 0x29, 0x7D, 0xD1, 0xFE, 
0xED, 0xA6, 0x4D, 0x0C, 0x04, 0x37, 0x8D, 0xDD, 0xFF, 0xE4, 0x99, 0x42, 0x08, 0x07, 0x40, 0x97, 
0xE3, 0xFF, 0xE0, 0x92, 0x3C, 0x06, 0x09, 0x43, 0x9A, 0xE4, 0xFF, 0xDF, 0x92, 0x3D, 0x06, 0x08, 
0x41, 0x96, 0xE1, 0xFF, 0xE3, 0x99, 0x43, 0x09, 0x05, 0x38, 0x8C, 0xDA, 0xFF, 0xEA, 0xA6, 0x50, 
0x10, 0x01, 0x2C, 0x7B, 0xCD, 0xFC, 0xF4, 0xB8, 0x63, 0x1B, 0x00, 0x1C, 0x64, 0xB8, 0xF4, 0xFC, 
0xCE, 0x7E, 0x2F, 0x02, 0x0C, 0x48, 0x9C, 0xE3, 0xFF, 0xE5, 0x9F, 0x4C, 0x0E, 0x02, 0x2A, 0x77, 
0xC8, 0xF9, 0xF8, 0xC3, 0x72, 0x27, 0x01, 0x10, 0x4D, 0xA0, 0xE5, 0xFF, 0xE5, 0xA1, 0x4F, 0x11, 
0x01, 0x25, 0x6E, 0xBE, 0xF5, 0xFC, 0xD0, 0x83, 0x35, 0x05, 0x07, 0x3A, 0x88, 0xD3, 0xFD, 0xF4, 
0xBC, 0x6C, 0x24, 0x01, 0x0F, 0x4B, 0x9B, 0xE0, 0xFF, 0xEC, 0xAE, 0x5E, 0x1B, 0x00, 0x16, 0x56, 
0xA6, 0xE7, 0xFF, 0xE7, 0xA6, 0x57, 0x17, 0x00, 0x19, 0x5A, 0xA9, 0xE8, 0xFF, 0xE6, 0xA6, 0x57, 
0x17, 0x00, 0x18, 0x57, 0xA6, 0xE6, 0xFF, 0xE9, 0xAC, 0x5E, 0x1C, 0x00, 0x13, 0x4E, 0x9B, 0xDE, 
0xFF, 0xF0, 0xB9, 0x6C, 0x27, 0x02, 0x0B, 0x3E, 0x89, 0xD0, 0xFB, 0xF8, 0xCB, 0x82, 0x38, 0x08, 
0x03, 0x2A, 0x6F, 0xBA, 0xF1, 0xFF, 0xE0, 0x9F, 0x53, 0x17, 0x00, 0x15, 0x50, 0x9B, 0xDD, 0xFE, 
0xF3, 0xC0, 0x77, 0x31, 0x06, 0x05, 0x2E, 0x73, 0xBC, 0xF1, 0xFF, 0xE1, 0xA2, 0x58, 0x1B, 0x00, 
0x10, 0x46, 0x8F, 0xD3, 0xFB, 0xF9, 0xCF, 0x8B, 0x43, 0x0F, 0x00, 0x1C, 0x58, 0xA2, 0xE0, 0xFE, 
0xF3, 0xC2, 0x7B, 0x36, 0x09, 0x02, 0x24, 0x64, 0xAC, 0xE6, 0xFF, 0xEF, 0xBB, 0x74, 0x31, 0x07, 
0x03, 0x27, 0x67, 0xAF, 0xE8, 0xFF, 0xEF, 0xBB, 0x75, 0x32, 0x07, 0x02, 0x25, 0x63, 0xAA, 0xE4, 
0xFF, 0xF2, 0xC2, 0x7D, 0x3A, 0x0B, 0x01, 0x1D, 0x57, 0x9E, 0xDB, 0xFD, 0xF8, 0xCF, 0x8E, 0x49, 
0x14, 0x00, 0x11, 0x44, 0x89, 0xCA, 0xF6, 0xFE, 0xE1, 0xA7, 0x61, 0x25, 0x03, 0x06, 0x2D, 0x6C, 
0xB0, 0xE7, 0xFF, 0xF2, 0xC4, 0x82, 0x3F, 0x0F, 0x00, 0x15, 0x49, 0x8C, 0xCC, 0xF6, 0xFE, 0xE2, 
0xAA, 0x66, 0x2A, 0x05, 0x03, 0x24, 0x5F, 0xA3, 0xDD, 0xFC, 0xF9, 0xD4, 0x98, 0x54, 0x1D, 0x01, 
0x08, 0x30, 0x6E, 0xB0, 0xE5, 0xFF, 0xF5, 0xCC, 0x8D, 0x4B, 0x18, 0x00, 0x0B, 0x35, 0x73, 0xB5, 
0xE8, 0xFF, 0xF4, 0xCA, 0x8C, 0x4B, 0x18, 0x00, 0x0A, 0x33, 0x70, 0xB1, 0xE5, 0xFE, 0xF6, 0xCF, 
0x93, 0x52, 0x1D, 0x02, 0x07, 0x2B, 0x65, 0xA6, 0xDD, 0xFC, 0xFB, 0xDB, 0xA3, 0x62, 0x29, 0x06, 
0x02, 0x1D, 0x51, 0x91, 0xCC, 0xF4, 0xFF, 0xEA, 0xBA, 0x7C, 0x3E, 0x11, 0x00, 0x0D, 0x37, 0x73, 
0xB2, 0xE4, 0xFE, 0xF8, 0xD5, 0x9E, 0x5E, 0x27, 0x06, 0x02, 0x1C, 0x4E, 0x8C, 0xC7, 0xF1, 0xFF, 
0xEF, 0xC5, 0x89, 0x4C, 0x1B, 0x01, 0x06, 0x27, 0x5D, 0x9B, 0xD3, 0xF7, 0xFF, 0xE9, 0xBB, 0x7F, 
0x43, 0x15, 0x00, 0x09, 0x2C, 0x63, 0xA1, 0xD6, 0xF8, 0xFE, 0xE8, 0xB9, 0x7E, 0x43, 0x16, 0x00, 
0x08, 0x2A, 0x60, 0x9D, 0xD3, 0xF6, 0xFF, 0xEC, 0xC0, 0x86, 0x4B, 0x1C, 0x02, 0x04, 0x22, 0x54, 
0x8F, 0xC7, 0xEF, 0xFF, 0xF4, 0xCE, 0x98, 0x5D, 0x29, 0x08, 0x00, 0x14, 0x3F, 0x78, 0xB2, 0xE2, 
0xFC, 0xFC, 0xE2, 0xB2, 0x78, 0x40, 0x15, 0x01, 0x07, 0x26, 0x58, 0x92, 0xC9, 0xF0, 0xFF, 0xF4, 
0xD1, 0x9D, 0x63, 0x2F, 0x0B, 0x00, 0x0E, 0x33, 0x68, 0xA2, 0xD5, 0xF6, 0xFF, 0xEF, 0xC8, 0x92, 
0x59, 0x28, 0x08, 0x00, 0x12, 0x39, 0x6E, 0xA7, 0xD8, 0xF7, 0xFF, 0xED, 0xC6, 0x91, 0x59, 0x28, 
0x08, 0x00, 0x10, 0x36, 0x6A, 0xA3, 0xD4, 0xF5, 0xFF, 0xF1, 0xCD, 0x9B, 0x63, 0x30, 0x0D, 0x00, 
0x0A, 0x2B, 0x5C, 0x94, 0xC7, 0xED, 0xFF, 0xF8, 0xDB, 0xAD, 0x77, 0x42, 0x18, 0x02, 0x03, 0x1B, 
0x45, 0x7A, 0xB0, 0xDD, 0xF9, 0xFF, 0xED, 0xC7, 0x95, 0x5E, 0x2E, 0x0C, 0x00, 0x0A, 0x29, 0x58, 
0x8E, 0xC1, 0xE9, 0xFD, 0xFC, 0xE4, 0xBB, 0x87, 0x52, 0x25, 0x08, 0x00, 0x0E, 0x30, 0x60, 0x96, 
0xC7, 0xEC, 0xFE, 0xFB, 0xE2, 0xB8, 0x84, 0x50, 0x24, 0x08, 0x00, 0x0E, 0x2F, 0x5E, 0x93, 0xC4, 
0xEA, 0xFD, 0xFC, 0xE6, 0xBE, 0x8C, 0x58, 0x2B, 0x0C, 0x00, 0x09, 0x26, 0x51, 0x84, 0xB7, 0xE0, 
0xF9, 0xFF, 0xEF, 0xCE, 0x9F, 0x6C, 0x3C, 0x16, 0x02, 0x02, 0x16, 0x3B, 0x6C, 0x9F, 0xCD, 0xEF, 
0xFF, 0xFA, 0xE3, 0xBB, 0x8A, 0x58, 0x2C, 0x0D, 0x00, 0x07, 0x21, 0x49, 0x7B, 0xAC, 0xD7, 0xF4, 
0xFF, 0xF7, 0xDC, 0xB2, 0x81, 0x50, 0x26, 0x0A, 0x00, 0x09, 0x24, 0x4D, 0x7E, 0xAF, 0xD8, 0xF5, 
0xFF, 0xF7, 0xDD, 0xB4, 0x84, 0x53, 0x29, 0x0C, 0x00, 0x06, 0x1F, 0x46, 0x75, 0xA6, 0xD1, 0xF0, 
0xFF, 0xFB, 0xE5, 0xC0, 0x92, 0x62, 0x36, 0x14, 0x02, 0x02, 0x14, 0x35, 0x61, 0x91, 0xBF, 0xE4, 
0xFA, 0xFF, 0xF2, 0xD5, 0xAC, 0x7C, 0x4D, 0x26, 0x0A, 0x00, 0x07, 0x1E, 0x44, 0x71, 0xA1, 0xCB, 
0xEC, 0xFD, 0xFD, 0xEC, 0xCC, 0xA2, 0x73, 0x46, 0x20, 0x08, 0x00, 0x09, 0x22, 0x47, 0x74, 0xA3, 
0xCD, 0xEC, 0xFD, 0xFD, 0xED, 0xCE, 0xA4, 0x76, 0x49, 0x23, 0x0A, 0x00, 0x06, 0x1D, 0x40, 0x6B, 
0x9A, 0xC4, 0xE6, 0xFA, 0xFF, 0xF3, 0xD9, 0xB2, 0x86, 0x58, 0x30, 0x12, 0x02, 0x01, 0x11, 0x2F, 
0x57, 0x84, 0xB0, 0xD6, 0xF2, 0xFF, 0xFC, 0xEA, 0xCA, 0xA1, 0x75, 0x49, 0x24, 0x0B, 0x00, 0x04, 
0x18, 0x38, 0x61, 0x8E, 0xB9, 0xDD, 0xF5, 0xFF, 0xFA, 0xE6, 0xC6, 0x9D, 0x71, 0x46, 0x23, 0x0A, 
0x00, 0x04, 0x18, 0x37, 0x5F, 0x8B, 0xB6, 0xDA, 0xF3, 0xFF, 0xFC, 0xEA, 0xCC, 0xA5, 0x7A, 0x50, 
0x2B, 0x0F, 0x01, 0x02, 0x10, 0x2C, 0x51, 0x7B, 0xA6, 0xCC, 0xEA, 0xFC, 0xFF, 0xF4, 0xDC, 0xBA, 
0x91, 0x66, 0x3E, 0x1D, 0x08, 0x00, 0x06, 0x19, 0x38, 0x5F, 0x89, 0xB2, 0xD6, 0xF0, 0xFE, 0xFE, 
0xF0, 0xD6, 0xB3, 0x8A, 0x60, 0x39, 0x1A, 0x06, 0x00, 0x06, 0x1A, 0x39, 0x5F, 0x89, 0xB1, 0xD4, 
0xEF, 0xFD, 0xFE, 0xF2, 0xDA, 0xB8, 0x91, 0x67, 0x41, 0x20, 0x0A, 0x00, 0x03, 0x13, 0x2E, 0x52, 
0x7A, 0xA3, 0xC8, 0xE6, 0xF9, 0xFF, 0xF9, 0xE7, 0xCA, 0xA5, 0x7D, 0x55, 0x31, 0x15, 0x04, 0x00, 
0x08, 0x1C, 0x3A, 0x5E, 0x86, 0xAE, 0xD1, 0xEB, 0xFB, 0xFF, 0xF7, 0xE2, 0xC4, 0xA0, 0x78, 0x51, 
0x2F, 0x14, 0x04, 0x00, 0x08, 0x1B, 0x39, 0x5D, 0x84, 0xAB, 0xCD, 0xE9, 0xFA, 0xFF, 0xF9, 0xE7, 
0xCB, 0xA8, 0x82, 0x5B, 0x38, 0x1B, 0x08, 0x00, 0x04, 0x13, 0x2C, 0x4D, 0x73, 0x9A, 0xBE, 0xDC, 
0xF3, 0xFE, 0xFE, 0xF2, 0xDC, 0xBE, 0x9A, 0x74, 0x4E, 0x2D, 0x14, 0x04, 0x00, 0x06, 0x18, 0x33, 
0x54, 0x7A, 0x9F, 0xC2, 0xE0, 0xF4, 0xFE, 0xFE, 0xF2, 0xDC, 0xBE, 0x9B, 0x75, 0x50, 0x30, 0x16, 
0x06, 0x00, 0x05, 0x14, 0x2D, 0x4D, 0x71, 0x96, 0xB9, 0xD8, 0xEF, 0xFC, 0xFF, 0xF7, 0xE5, 0xCB, 
0xAA, 0x86, 0x61, 0x3F, 0x22, 0x0D, 0x01, 0x00, 0x0A, 0x1D, 0x38, 0x59, 0x7D, 0xA2, 0xC3, 0xDF, 
0xF3, 0xFE, 0xFE, 0xF5, 0xE1, 0xC6, 0xA5, 0x81, 0x5D, 0x3C, 0x20, 0x0C, 0x01, 0x00, 0x0A, 0x1C, 
0x36, 0x56, 0x7A, 0x9D, 0xBF, 0xDB, 0xF0, 0xFD, 0xFF, 0xF8, 0xE7, 0xCE, 0xB0, 0x8D, 0x6A, 0x48, 
0x2A, 0x13, 0x05, 0x00, 0x04, 0x12, 0x28, 0x45, 0x66, 0x89, 0xAC, 0xCB, 0xE4, 0xF6, 0xFF, 0xFE, 
0xF4, 0xE1, 0xC7, 0xA8, 0x86, 0x63, 0x43, 0x27, 0x11, 0x04, 0x00, 0x05, 0x13, 0x29, 0x45, 0x65, 
0x88, 0xA9, 0xC8, 0xE2, 0xF4, 0xFE, 0xFF, 0xF7, 0xE6, 0xCE, 0xB0, 0x8F, 0x6D, 0x4D, 0x30, 0x18, 
0x08, 0x00, 0x01, 0x0B, 0x1D, 0x36, 0x54, 0x75, 0x97, 0xB7, 0xD3, 0xE9, 0xF8, 0xFF, 0xFD, 0xF3, 
0xE0, 0xC7, 0xA9, 0x88, 0x67, 0x48, 0x2C, 0x16, 0x07, 0x00, 0x02, 0x0C, 0x1E, 0x36, 0x53, 0x73, 
0x94, 0xB4, 0xD0, 0xE7, 0xF7, 0xFF, 0xFE, 0xF6, 0xE5, 0xCE, 0xB2, 0x93, 0x72, 0x53, 0x36, 0x1E, 
0x0C, 0x02, 0x00, 0x06, 0x13, 0x28, 0x42, 0x60, 0x80, 0xA0, 0xBE, 0xD8, 0xEC, 0xFA, 0xFF, 0xFD, 
0xF3, 0xE1, 0xCA, 0xAE, 0x8F, 0x6F, 0x50, 0x34, 0x1D, 0x0C, 0x02, 0x00, 0x05, 0x12, 0x26, 0x3F, 
0x5C, 0x7B, 0x9A, 0xB8, 0xD2, 0xE7, 0xF7, 0xFE, 0xFF, 0xF7, 0xE9, 0xD4, 0xBA, 0x9D, 0x7E, 0x5F, 
0x43, 0x29, 0x15, 0x07, 0x00, 0x01, 0x09, 0x18, 0x2C, 0x46, 0x63, 0x82, 0xA0, 0xBD, 0xD6, 0xEA, 
0xF8, 0xFF, 0xFE, 0xF7, 0xE9, 0xD4, 0xBB, 0x9F, 0x81, 0x63, 0x46, 0x2D, 0x18, 0x09, 0x01, 0x00, 
0x06, 0x12, 0x25, 0x3D, 0x58, 0x76, 0x94, 0xB0, 0xCB, 0xE1, 0xF1, 0xFC, 0xFF, 0xFC, 0xF2, 0xE2, 
0xCC, 0xB3, 0x96, 0x79, 0x5C, 0x40, 0x28, 0x15, 0x08, 0x01, 0x00, 0x06, 0x13, 0x26, 0x3D, 0x57, 
0x74, 0x91, 0xAE, 0xC8, 0xDE, 0xEF, 0xFA, 0xFF, 0xFE, 0xF6, 0xE7, 0xD4, 0xBC, 0xA1, 0x85, 0x68, 
0x4C, 0x33, 0x1E, 0x0E, 0x04, 0x00, 0x02, 0x0B, 0x19, 0x2D, 0x44, 0x5F, 0x7B, 0x98, 0xB3, 0xCC, 
0xE1, 0xF1, 0xFB, 0xFF, 0xFD, 0xF5, 0xE7, 0xD5, 0xBD, 0xA3, 0x88, 0x6C, 0x50, 0x37, 0x22, 0x11, 
0x06, 0x00, 0x00, 0x07, 0x13, 0x25, 0x3A, 0x53, 0x6E, 0x8A, 0xA5, 0xBF, 0xD5, 0xE8, 0xF5, 0xFD, 
0xFF, 0xFC, 0xF2, 0xE3, 0xD0, 0xB9, 0x9F, 0x84, 0x68, 0x4E, 0x36, 0x21, 0x11, 0x06, 0x00, 0x00, 
0x06, 0x11, 0x22, 0x36, 0x4E, 0x68, 0x83, 0x9E, 0xB7, 0xCE, 0xE2, 0xF1, 0xFB, 0xFF, 0xFE, 0xF7, 
0xEC, 0xDB, 0xC6, 0xAE, 0x95, 0x7A, 0x60, 0x47, 0x30, 0x1D, 0x0E, 0x04, 0x00, 0x01, 0x07, 0x13, 
0x23, 0x37, 0x4E, 0x67, 0x81, 0x9C, 0xB4, 0xCB, 0xDF, 0xEE, 0xF9, 0xFF, 0xFF, 0xFA, 0xF0, 0xE1, 
0xCF, 0xB9, 0xA0, 0x87, 0x6D, 0x54, 0x3C, 0x28, 0x17, 0x0A, 0x02, 0x00, 0x02, 0x09, 0x16, 0x26, 
0x3A, 0x51, 0x6A, 0x84, 0x9D, 0xB5, 0xCB, 0xDE, 0xED, 0xF8, 0xFE, 0xFF, 0xFB, 0xF2, 0xE5, 0xD4, 
0xBF, 0xA8, 0x90, 0x76, 0x5D, 0x46, 0x31, 0x1E, 0x10, 0x06, 0x00, 0x00, 0x04, 0x0D, 0x1B, 0x2C, 
0x40, 0x57, 0x6F, 0x88, 0xA0, 0xB8, 0xCD, 0xDF, 0xEE, 0xF8, 0xFE, 0xFF, 0xFC, 0xF4, 0xE7, 0xD7, 
0xC4, 0xAE, 0x96, 0x7E, 0x65, 0x4E, 0x38, 0x26, 0x16, 0x0A, 0x03, 0x00, 0x01, 0x07, 0x12, 0x20, 
0x32, 0x47, 0x5D, 0x75, 0x8D, 0xA5, 0xBB, 0xCF, 0xE0, 0xEE, 0xF8, 0xFE, 0xFF, 0xFC, 0xF5, 0xE9, 
0xDA, 0xC8, 0xB3, 0x9C, 0x84, 0x6D, 0x56, 0x40, 0x2D, 0x1C, 0x0F, 0x06, 0x01, 0x00, 0x03, 0x0B, 
0x17, 0x26, 0x38, 0x4C, 0x63, 0x7A, 0x91, 0xA8, 0xBD, 0xD1, 0xE1, 0xEF, 0xF8, 0xFE, 0xFF, 0xFD, 
0xF6, 0xEB, 0xDD, 0xCC, 0xB8, 0xA3, 0x8C, 0x75, 0x5E, 0x49, 0x35, 0x24, 0x15, 0x0A, 0x03, 0x00, 
0x00, 0x05, 0x0E, 0x1A, 0x2A, 0x3C, 0x50, 0x66, 0x7D, 0x93, 0xA9, 0xBE, 0xD0, 0xE1, 0xEE, 0xF7, 
0xFD, 0xFF, 0xFE, 0xF8, 0xEE, 0xE2, 0xD2, 0xC0, 0xAB, 0x96, 0x80, 0x69, 0x54, 0x40, 0x2D, 0x1E, 
0x11, 0x07, 0x02, 0x00, 0x01, 0x07, 0x10, 0x1C, 0x2B, 0x3D, 0x51, 0x66, 0x7C, 0x92, 0xA7, 0xBB, 
0xCD, 0xDE, 0xEB, 0xF5, 0xFC, 0xFF, 0xFF, 0xFB, 0xF3, 0xE8, 0xDA, 0xCA, 0xB7, 0xA3, 0x8E, 0x78, 
0x63, 0x4E, 0x3B, 0x2A, 0x1B, 0x0F, 0x07, 0x01, 0x00, 0x01, 0x06, 0x0F, 0x1B, 0x29, 0x3A, 0x4D, 
0x61, 0x76, 0x8B, 0xA0, 0xB4, 0xC6, 0xD7, 0xE5, 0xF0, 0xF9, 0xFE, 0xFF, 0xFE, 0xF9, 0xF0, 0xE5, 
0xD7, 0xC6, 0xB4, 0xA0, 0x8C, 0x77, 0x62, 0x4F, 0x3C, 0x2B, 0x1D, 0x11, 0x08, 0x02, 0x00, 0x00, 
0x04, 0x0C, 0x16, 0x23, 0x32, 0x43, 0x56, 0x6A, 0x7E, 0x93, 0xA6, 0xB9, 0xCB, 0xDA, 0xE7, 0xF2, 
0xFA, 0xFE, 0xFF, 0xFE, 0xF9, 0xF1, 0xE6, 0xD9, 0xC9, 0xB8, 0xA5, 0x92, 0x7D, 0x69, 0x56, 0x44, 
0x33, 0x24, 0x17, 0x0D, 0x05, 0x01, 0x00, 0x01, 0x06, 0x0E, 0x18, 0x25, 0x34, 0x45, 0x57, 0x6A, 
0x7E, 0x91, 0xA4, 0xB7, 0xC8, 0xD7, 0xE4, 0xEF, 0xF7, 0xFD, 0xFF, 0xFF, 0xFB, 0xF5, 0xEC, 0xE1, 
0xD3, 0xC3, 0xB2, 0xA0, 0x8D, 0x79, 0x66, 0x54, 0x42, 0x32, 0x24, 0x17, 0x0D, 0x06, 0x01, 0x00, 
0x01, 0x05, 0x0B, 0x14, 0x20, 0x2E, 0x3D, 0x4E, 0x60, 0x73, 0x86, 0x99, 0xAB, 0xBC, 0xCC, 0xDA, 
0xE7, 0xF1, 0xF8, 0xFD, 0xFF, 0xFF, 0xFC, 0xF6, 0xED, 0xE2, 0xD6, 0xC7, 0xB7, 0xA5, 0x93, 0x81, 
0x6E, 0x5C, 0x4B, 0x3A, 0x2B, 0x1E, 0x13, 0x0B, 0x04, 0x01, 0x00, 0x01, 0x05, 0x0C, 0x15, 0x20, 
0x2D, 0x3C, 0x4C, 0x5D, 0x6F, 0x82, 0x94, 0xA5, 0xB6, 0xC6, 0xD5, 0xE1, 0xEC, 0xF4, 0xFB, 0xFE, 
0xFF, 0xFE, 0xFA, 0xF4, 0xEB, 0xE1, 0xD4, 0xC6, 0xB6, 0xA6, 0x94, 0x82, 0x70, 0x5F, 0x4E, 0x3E, 
0x30, 0x23, 0x17, 0x0E, 0x07, 0x02, 0x00, 0x00, 0x02, 0x07, 0x0E, 0x18, 0x23, 0x30, 0x3E, 0x4E, 
0x5F, 0x70, 0x81, 0x93, 0xA4, 0xB4, 0xC3, 0xD2, 0xDE, 0xE9, 0xF2, 0xF9, 0xFD, 0xFF, 0xFF, 0xFD, 
0xF8, 0xF1, 0xE8, 0xDD, 0xD1, 0xC3, 0xB4, 0xA3, 0x93, 0x82, 0x71, 0x60, 0x50, 0x40, 0x32, 0x25, 
0x1A, 0x10, 0x09, 0x04, 0x00, 0x00, 0x01, 0x04, 0x0A, 0x12, 0x1B, 0x26, 0x33, 0x41, 0x51, 0x61, 
0x71, 0x82, 0x93, 0xA3, 0xB3, 0xC1, 0xCF, 0xDB, 0xE6, 0xEF, 0xF6, 0xFC, 0xFF, 0xFF, 0xFE, 0xFB, 
0xF5, 0xEE, 0xE5, 0xDA, 0xCE, 0xC0, 0xB1, 0xA2, 0x92, 0x81, 0x71, 0x61, 0x51, 0x43, 0x35, 0x28, 
0x1D, 0x13, 0x0C, 0x06, 0x02, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x14, 0x1E, 0x29, 0x35, 0x43, 0x51, 
0x61, 0x70, 0x80, 0x90, 0xA0, 0xAF, 0xBE, 0xCB, 0xD7, 0xE2, 0xEC, 0xF3, 0xF9, 0xFD, 0xFF, 0xFF, 
0xFD, 0xFA, 0xF4, 0xED, 0xE4, 0xD9, 0xCD, 0xC0, 0xB2, 0xA4, 0x94, 0x85, 0x75, 0x66, 0x57, 0x48, 
0x3B, 0x2E, 0x23, 0x19, 0x10, 0x09, 0x04, 0x01, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x14, 0x1D, 0x27, 
0x33, 0x40, 0x4E, 0x5C, 0x6B, 0x7A, 0x89, 0x99, 0xA7, 0xB5, 0xC3, 0xCF, 0xDB, 0xE5, 0xED, 0xF4, 
0xFA, 0xFD, 0xFF, 0xFF, 0xFE, 0xFA, 0xF5, 0xEF, 0xE6, 0xDD, 0xD2, 0xC6, 0xB9, 0xAB, 0x9D, 0x8E, 
0x7F, 0x71, 0x62, 0x54, 0x46, 0x39, 0x2D, 0x23, 0x19, 0x11, 0x0A, 0x05, 0x02, 0x00, 0x00, 0x01, 
0x04, 0x09, 0x10, 0x18, 0x21, 0x2B, 0x37, 0x43, 0x50, 0x5E, 0x6D, 0x7B, 0x8A, 0x98, 0xA6, 0xB3, 
0xC0, 0xCC, 0xD7, 0xE1, 0xEA, 0xF1, 0xF7, 0xFC, 0xFE, 0xFF, 0xFF, 0xFD, 0xF9, 0xF4, 0xEE, 0xE6, 
0xDD, 0xD2, 0xC7, 0xBB, 0xAE, 0xA0, 0x92, 0x84, 0x76, 0x68, 0x5A, 0x4D, 0x40, 0x35, 0x2A, 0x20, 
0x17, 0x10, 0x09, 0x05, 0x02, 0x00, 0x00, 0x01, 0x04, 0x08, 0x0E, 0x15, 0x1D, 0x27, 0x31, 0x3D, 
0x49, 0x55, 0x63, 0x70, 0x7E, 0x8C, 0x9A, 0xA7, 0xB4, 0xC0, 0xCB, 0xD6, 0xE0, 0xE8, 0xEF, 0xF5, 
0xFA, 0xFD, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF3, 0xEC, 0xE5, 0xDC, 0xD2, 0xC7, 0xBC, 0xAF, 0xA3, 
0x95, 0x88, 0x7B, 0x6D, 0x60, 0x53, 0x47, 0x3B, 0x31, 0x26, 0x1D, 0x15, 0x0F, 0x09, 0x05, 0x02, 
0x00, 0x00, 0x01, 0x03, 0x07, 0x0C, 0x12, 0x19, 0x22, 0x2B, 0x36, 0x41, 0x4C, 0x59, 0x65, 0x72, 
0x7F, 0x8C, 0x99, 0xA6, 0xB2, 0xBE, 0xC9, 0xD3, 0xDC, 0xE5, 0xEC, 0xF2, 0xF7, 0xFB, 0xFE, 0xFF, 
0xFF, 0xFE, 0xFC, 0xF8, 0xF3, 0xED, 0xE6, 0xDD, 0xD4, 0xCA, 0xBF, 0xB4, 0xA8, 0x9C, 0x90, 0x83, 
0x76, 0x6A, 0x5D, 0x51, 0x46, 0x3B, 0x30, 0x27, 0x1E, 0x17, 0x10, 0x0A, 0x06, 0x03, 0x00, 0x00, 
0x00, 0x01, 0x04, 0x08, 0x0D, 0x13, 0x1A, 0x22, 0x2B, 0x35, 0x3F, 0x4A, 0x56, 0x62, 0x6E, 0x7A, 
0x86, 0x93, 0x9F, 0xAA, 0xB6, 0xC1, 0xCB, 0xD4, 0xDD, 0xE5, 0xEC, 0xF2, 0xF7, 0xFB, 0xFD, 0xFF, 
0xFF, 0xFF, 0xFD, 0xFA, 0xF6, 0xF1, 0xEB, 0xE4, 0xDC, 0xD3, 0xCA, 0xBF, 0xB5, 0xAA, 0x9E, 0x93, 
0x87, 0x7B, 0x6F, 0x63, 0x58, 0x4C, 0x42, 0x38, 0x2E, 0x25, 0x1D, 0x16, 0x10, 0x0B, 0x06, 0x03, 
0x01, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0A, 0x0F, 0x15, 0x1C, 0x24, 0x2C, 0x35, 0x3F, 0x4A, 0x54, 
0x5F, 0x6B, 0x76, 0x82, 0x8D, 0x99, 0xA4, 0xAF, 0xB9, 0xC3, 0xCD, 0xD6, 0xDE, 0xE5, 0xEC, 0xF1, 
0xF6, 0xFA, 0xFD, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF9, 0xF5, 0xF0, 0xEA, 0xE3, 0xDB, 0xD3, 0xCA, 
0xC1, 0xB7, 0xAD, 0xA2, 0x97, 0x8C, 0x81, 0x76, 0x6A, 0x60, 0x55, 0x4A, 0x41, 0x37, 0x2E, 0x26, 
0x1E, 0x18, 0x11, 0x0C, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0A, 0x0F, 0x15, 
0x1B, 0x22, 0x2A, 0x32, 0x3B, 0x45, 0x4F, 0x59, 0x63, 0x6E, 0x79, 0x84, 0x8E, 0x99, 0xA4, 0xAE, 
0xB8, 0xC1, 0xCA, 0xD3, 0xDB, 0xE2, 0xE8, 0xEE, 0xF3, 0xF7, 0xFB, 0xFD, 0xFF, 0xFF, 0xFF, 0xFE, 
0xFC, 0xFA, 0xF6, 0xF2, 0xEC, 0xE7, 0xE0, 0xD9, 0xD1, 0xC8, 0xBF, 0xB6, 0xAC, 0xA3, 0x98, 0x8E, 
0x84, 0x79, 0x6F, 0x64, 0x5A, 0x50, 0x47, 0x3E, 0x35, 0x2D, 0x25, 0x1E, 0x18, 0x12, 0x0D, 0x09, 
0x05, 0x03, 0x01, 0x00, 0x00, 0x00, 0x02, 0x04, 0x07, 0x0B, 0x0F, 0x14, 0x1A, 0x21, 0x28, 0x30, 
0x38, 0x40, 0x49, 0x53, 0x5C, 0x66, 0x70, 0x7A, 0x84, 0x8E, 0x98, 0xA2, 0xAC, 0xB5, 0xBE, 0xC7, 
0xCF, 0xD6, 0xDD, 0xE4, 0xEA, 0xEF, 0xF4, 0xF7, 0xFA, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 
0xF8, 0xF5, 0xF0, 0xEB, 0xE6, 0xE0, 0xD9, 0xD1, 0xCA, 0xC2, 0xB9, 0xB0, 0xA7, 0x9D, 0x94, 0x8A, 
0x81, 0x77, 0x6D, 0x64, 0x5A, 0x51, 0x48, 0x40, 0x38, 0x30, 0x28, 0x22, 0x1B, 0x16, 0x11, 0x0C, 
0x08, 0x05, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x05, 0x08, 0x0C, 0x10, 0x15, 0x1B, 0x21, 
0x28, 0x2F, 0x36, 0x3E, 0x47, 0x4F, 0x58, 0x61, 0x6A, 0x74, 0x7D, 0x86, 0x8F, 0x99, 0xA2, 0xAB, 
0xB3, 0xBC, 0xC4, 0xCB, 0xD3, 0xD9, 0xE0, 0xE6, 0xEB, 0xF0, 0xF4, 0xF7, 0xFA, 0xFD, 0xFE, 0xFF, 
0xFF, 0xFF, 0xFE, 0xFD, 0xFA, 0xF7, 0xF4, 0xF0, 0xEB, 0xE6, 0xE0, 0xDA, 0xD4, 0xCC, 0xC5, 0xBD, 
0xB5, 0xAD, 0xA4, 0x9C, 0x93, 0x8A, 0x81, 0x78, 0x6F, 0x66, 0x5D, 0x55, 0x4D, 0x45, 0x3D, 0x35, 
0x2E, 0x28, 0x21, 0x1C, 0x16, 0x12, 0x0D, 0x0A, 0x06, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 
0x03, 0x05, 0x08, 0x0B, 0x0F, 0x13, 0x18, 0x1D, 0x23, 0x2A, 0x30, 0x37, 0x3F, 0x46, 0x4E, 0x56, 
0x5E, 0x67, 0x6F, 0x78, 0x80, 0x89, 0x92, 0x9A, 0xA2, 0xAB, 0xB3, 0xBA, 0xC2, 0xC9, 0xD0, 0xD6, 
0xDC, 0xE2, 0xE7, 0xEC, 0xF0, 0xF4, 0xF7, 0xFA, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 
0xFA, 0xF7, 0xF4, 0xF0, 0xEC, 0xE7, 0xE2, 0xDD, 0xD7, 0xD1, 0xCA, 0xC3, 0xBC, 0xB5, 0xAD, 0xA5, 
0x9D, 0x95, 0x8D, 0x85, 0x7C, 0x74, 0x6C, 0x64, 0x5C, 0x54, 0x4D, 0x45, 0x3E, 0x37, 0x31, 0x2A, 
0x24, 0x1F, 0x1A, 0x15, 0x11, 0x0D, 0x09, 0x07, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 
0x03, 0x05, 0x08, 0x0B, 0x0E, 0x12, 0x16, 0x1B, 0x20, 0x26, 0x2C, 0x32, 0x38, 0x3F, 0x46, 0x4D, 
0x55, 0x5C, 0x64, 0x6B, 0x73, 0x7B, 0x83, 0x8B, 0x93, 0x9A, 0xA2, 0xA9, 0xB1, 0xB8, 0xBF, 0xC5, 
0xCC, 0xD2, 0xD8, 0xDD, 0xE2, 0xE7, 0xEB, 0xEF, 0xF3, 0xF6, 0xF9, 0xFB, 0xFD, 0xFE, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFE, 0xFD, 0xFB, 0xF8, 0xF6, 0xF3, 0xEF, 0xEB, 0xE7, 0xE2, 0xDD, 0xD8, 0xD2, 0xCC, 
0xC6, 0xBF, 0xB9, 0xB2, 0xAB, 0xA4, 0x9C, 0x95, 0x8E, 0x86, 0x7F, 0x77, 0x70, 0x68, 0x61, 0x5A, 
0x53, 0x4C, 0x45, 0x3F, 0x38, 0x32, 0x2C, 0x27, 0x22, 0x1D, 0x18, 0x14, 0x10, 0x0D, 0x0A, 0x07, 
0x05, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x05, 0x07, 0x09, 0x0C, 0x10, 0x14, 
0x18, 0x1C, 0x21, 0x26, 0x2B, 0x30, 0x36, 0x3C, 0x43, 0x49, 0x4F, 0x56, 0x5D, 0x64, 0x6B, 0x72, 
0x79, 0x80, 0x87, 0x8F, 0x96, 0x9D, 0xA3, 0xAA, 0xB1, 0xB7, 0xBE, 0xC4, 0xC9, 0xCF, 0xD5, 0xDA, 
0xDE, 0xE3, 0xE7, 0xEB, 0xEF, 0xF2, 0xF5, 0xF8, 0xFA, 0xFC, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFE, 0xFD, 0xFC, 0xFA, 0xF8, 0xF5, 0xF2, 0xEF, 0xEB, 0xE7, 0xE3, 0xDF, 0xDA, 0xD5, 0xD0, 0xCB, 
0xC5, 0xBF, 0xB9, 0xB3, 0xAD, 0xA6, 0xA0, 0x99, 0x92, 0x8C, 0x85, 0x7E, 0x77, 0x71, 0x6A, 0x63, 
0x5D, 0x56, 0x50, 0x4A, 0x44, 0x3E, 0x39, 0x33, 0x2E, 0x29, 0x24, 0x1F, 0x1B, 0x17, 0x13, 0x10, 
0x0D, 0x0A, 0x08, 0x06, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x06, 
0x08, 0x0A, 0x0D, 0x10, 0x13, 0x17, 0x1B, 0x1F, 0x23, 0x28, 0x2D, 0x32, 0x37, 0x3C, 0x42, 0x48, 
0x4E, 0x54, 0x5A, 0x60, 0x66, 0x6C, 0x73, 0x79, 0x80, 0x86, 0x8C, 0x93, 0x99, 0x9F, 0xA5, 0xAB, 
0xB1, 0xB7, 0xBD, 0xC2, 0xC7, 0xCC, 0xD1, 0xD6, 0xDB, 0xDF, 0xE3, 0xE7, 0xEA, 0xEE, 0xF1, 0xF4, 
0xF6, 0xF8, 0xFA, 0xFC, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFC, 0xFA, 0xF8, 
0xF6, 0xF3, 0xF1, 0xEE, 0xEA, 0xE7, 0xE3, 0xDF, 0xDB, 0xD7, 0xD2, 0xCD, 0xC9, 0xC3, 0xBE, 0xB9, 
0xB3, 0xAE, 0xA8, 0xA2, 0x9C, 0x97, 0x91, 0x8B, 0x85, 0x7F, 0x79, 0x73, 0x6D, 0x67, 0x61, 0x5B, 
0x55, 0x50, 0x4A, 0x45, 0x40, 0x3B, 0x36, 0x31, 0x2C, 0x28, 0x24, 0x20, 0x1C, 0x18, 0x15, 0x12, 
0x0F, 0x0C, 0x0A, 0x08, 0x06, 0x04, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 
0x03, 0x05, 0x06, 0x08, 0x0B, 0x0D, 0x10, 0x13, 0x16, 0x19, 0x1D, 0x20, 0x24, 0x29, 0x2D, 0x31, 
0x36, 0x3B, 0x3F, 0x44, 0x4A, 0x4F, 0x54, 0x5A, 0x5F, 0x64, 0x6A, 0x70, 0x75, 0x7B, 0x81, 0x86, 
0x8C, 0x91, 0x97, 0x9C, 0xA2, 0xA7, 0xAD, 0xB2, 0xB7, 0xBC, 0xC1, 0xC5, 0xCA, 0xCF, 0xD3, 0xD7, 
0xDB, 0xDF, 0xE2, 0xE6, 0xE9, 0xEC, 0xEF, 0xF1, 0xF4, 0xF6, 0xF8, 0xFA, 0xFB, 0xFD, 0xFE, 0xFE, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFD, 0xFB, 0xFA, 0xF8, 0xF6, 0xF4, 0xF2, 0xEF, 0xED, 
0xEA, 0xE7, 0xE3, 0xE0, 0xDC, 0xD8, 0xD4, 0xD0, 0xCC, 0xC8, 0xC3, 0xBF, 0xBA, 0xB5, 0xB0, 0xAB, 
0xA6, 0xA1, 0x9C, 0x97, 0x92, 0x8C, 0x87, 0x82, 0x7D, 0x77, 0x72, 0x6D, 0x68, 0x63, 0x5D, 0x58, 
0x53, 0x4F, 0x4A, 0x45, 0x41, 0x3C, 0x38, 0x33, 0x2F, 0x2B, 0x28, 0x24, 0x20, 0x1D, 0x1A, 0x17, 
0x14, 0x11, 0x0F, 0x0C, 0x0A, 0x08, 0x06, 0x05, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x06, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x12, 0x15, 0x18, 0x1B, 
0x1E, 0x21, 0x24, 0x28, 0x2C, 0x30, 0x33, 0x38, 0x3C, 0x40, 0x44, 0x49, 0x4D, 0x52, 0x57, 0x5B, 
0x60, 0x65, 0x6A, 0x6F, 0x73, 0x78, 0x7D, 0x82, 0x87, 0x8C, 0x91, 0x96, 0x9A, 0x9F, 0xA4, 0xA8, 
0xAD, 0xB2, 0xB6, 0xBA, 0xBF, 0xC3, 0xC7, 0xCB, 0xCF, 0xD2, 0xD6, 0xDA, 0xDD, 0xE0, 0xE3, 0xE6, 
0xE9, 0xEC, 0xEE, 0xF0, 0xF3, 0xF5, 0xF6, 0xF8, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFD, 0xFC, 0xFA, 0xF9, 0xF7, 0xF6, 0xF4, 0xF2, 0xF0, 0xED, 
0xEB, 0xE8, 0xE5, 0xE3, 0xE0, 0xDC, 0xD9, 0xD6, 0xD2, 0xCF, 0xCB, 0xC7, 0xC3, 0xBF, 0xBB, 0xB7, 
0xB3, 0xAF, 0xAB, 0xA6, 0xA2, 0x9E, 0x99, 0x95, 0x90, 0x8C, 0x87, 0x83, 0x7E, 0x79, 0x75, 0x70, 
0x6C, 0x68, 0x63, 0x5F, 0x5A, 0x56, 0x52, 0x4E, 0x4A, 0x46, 0x42, 0x3E, 0x3A, 0x36, 0x33, 0x2F, 
0x2C, 0x28, 0x25, 0x22, 0x1F, 0x1C, 0x1A, 0x17, 0x14, 0x12, 0x10, 0x0E, 0x0C, 0x0A, 0x08, 0x07, 
0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 
0x03, 0x04, 0x06, 0x07, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x12, 0x14, 0x17, 0x19, 0x1C, 0x1E, 0x21, 
0x24, 0x27, 0x2A, 0x2E, 0x31, 0x34, 0x38, 0x3B, 0x3F, 0x43, 0x46, 0x4A, 0x4E, 0x52, 0x56, 0x5A, 
0x5E, 0x62, 0x66, 0x6A, 0x6E, 0x72, 0x77, 0x7B, 0x7F, 0x83, 0x87, 0x8B, 0x8F, 0x94, 0x98, 0x9C, 
0xA0, 0xA4, 0xA8, 0xAC, 0xAF, 0xB3, 0xB7, 0xBB, 0xBE, 0xC2, 0xC5, 0xC9, 0xCC, 0xCF, 0xD2, 0xD5, 
0xD8, 0xDB, 0xDE, 0xE1, 0xE3, 0xE6, 0xE8, 0xEB, 0xED, 0xEF, 0xF1, 0xF3, 0xF4, 0xF6, 0xF7, 0xF9, 
0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 
0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF6, 0xF5, 0xF3, 0xF1, 0xEF, 0xED, 0xEB, 0xE9, 0xE7, 0xE4, 
0xE2, 0xDF, 0xDD, 0xDA, 0xD7, 0xD5, 0xD2, 0xCF, 0xCC, 0xC8, 0xC5, 0xC2, 0xBF, 0xBB, 0xB8, 0xB4, 
0xB1, 0xAD, 0xAA, 0xA6, 0xA2, 0x9F, 0x9B, 0x97, 0x93, 0x90, 0x8C, 0x88, 0x84, 0x80, 0x7D, 0x79, 
0x75, 0x71, 0x6E, 0x6A, 0x66, 0x62, 0x5F, 0x5B, 0x58, 0x54, 0x50, 0x4D, 0x4A, 0x46, 0x43, 0x40, 
0x3C, 0x39, 0x36, 0x33, 0x30, 0x2D, 0x2A, 0x28, 0x25, 0x23, 0x20, 0x1E, 0x1B, 0x19, 0x17, 0x15, 
0x13, 0x11, 0x0F, 0x0D, 0x0C, 0x0A, 0x09, 0x08
};

// ring buffer
volatile uint8_t ringCount = 0; // number of entries in ringbuffer
volatile uint8_t ringRead = 0;  // read position
uint8_t ringWrite = 0;          // write position
uint8_t ringbuffer[256];        // ringbuffer
uint16_t samplePosition = 0;    // sample position

uint16_t lfsr = 0xACE1;         // pseudo random number generator seed

bool triggered = false;         // button pressed flag
bool foldWave = false;          // fold wave flag
bool lofi = false;              // lofi flag
uint16_t positionValue = 0;     // sample position value

uint16_t adcSizeValue = 0;      // ADC size value
uint8_t adcFoldValue = 0;       // ADC fold value

// function prototypes
void playSampleFromPosition(uint16_t, uint16_t);
uint16_t pseudoRandom();
void writeRingBuffer(uint8_t);
void resetRingBuffer();
uint8_t readSample(uint16_t);
uint16_t map(uint16_t, uint16_t, uint16_t, uint16_t, uint16_t);


void setup() {
    /* -------- PWM setup -------- */
    DDRB |= (1 << DDB1); // Enable PWM output pin PB1
    PLLCSR = (1 << PCKE) | (1 << PLLE);
    TCCR1 = (1 << PWM1A) | (2 << COM1A0) | (1 << CS10); // PWM A, clear on match, 1:1 prescale

    /* -------- Timer0 setup -------- */
    TCCR0A = (3 << WGM00); // Fast PWM
    TCCR0B = (1 << WGM02) | (2 << CS00); // 1/8 prescale
    TIMSK = (1 << OCIE0A); // Enable compare match, disable overflow
    OCR0A = 49;

    /* -------- Digital input setup -------- */
    DDRB &= ~(1 << DDB2); // trigger PB2
    DDRB &= ~(1 << DDB3); // fold PB3
    DDRB &= ~(1 << DDB0); // lofi PB0

    /* -------- ADC setup -------- */
    // ADC continously running in background, no interrupt, PB4 (ADC2) 
    DDRB    &= ~(1 << DDB4); // Set PB4 as input
    DIDR0   |= (1 << ADC2D); // Disable digital input on ADC2
    ADMUX   |= (1 << MUX1);  // Select ADC2 
    ADMUX   |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
    ADCSRA  |= (1 << ADEN)   // Enable ADC
            | (1 << ADPS2)   // Prescaler 128
            | (1 << ADPS1);  // Enable ADC, start conversion, prescaler 128
    ADCSRA  |= (1 << ADSC);  // Start conversion

    sei(); // Enable global interrupts
}

int main() {
    setup();

    while (true)
    {
        // if trigger is high
        if((PINB & (1<<PINB2)) && triggered == false) { // if trigger is pressed
            triggered = true;               // set button pressed flag
            positionValue = pseudoRandom(); // generate random number

            
            if (!(ADCSRA & (1 << ADSC)))
            {
                uint8_t low = ADCL;
                uint8_t high = ADCH;
                adcSizeValue =  (high << 8) | low;
                ADCSRA |= (1 << ADSC);
            }

            foldWave = (PINB & (1<<PINB3)); // read fold setting
            lofi = (PINB & (1<<PINB0));     // read LoFi setting

            static bool prev_lofi = !lofi;  // Initialize to the opposite of lofi so the register is set on the first run
            if(prev_lofi != lofi){
                if(lofi){
                    TCCR0B = 1<<WGM02 | 3<<CS00; // prescaler = 1/64
                }else{
                    TCCR0B = 1<<WGM02 | 2<<CS00; // prescaler = 1/8
                }
                prev_lofi = lofi; // Update the previous state
            }

            // play the sample
            playSampleFromPosition(positionValue, adcSizeValue); // play sample
        }

        // if trigger is released
        if(!(PINB & (1<<PINB2))) { 
            triggered = false;
        }   
    }
}

// Pseudo random number generator
uint16_t pseudoRandom() {
    lfsr = (lfsr >> 1) ^ (-(lfsr & 1u) & 0xB400u);
    return lfsr % 5001;  // Generate a random number between 0 and 5000
}

void writeRingBuffer(uint8_t sampleValue) {
    while (ringCount >= 128){};             // wait until there is space in ringbuffer (filled by ISR)
    ringbuffer[ringWrite++] = sampleValue;  // write sample to ringbuffer
    ringCount++;                            // increment ringbuffer data count
}

void resetRingBuffer() {
    ringRead = 0;
    ringWrite = 0;
    ringCount = 0;
}

uint8_t readSample(uint16_t position) {
    return pgm_read_byte_near(chirp + position);
}

void playSampleFromPosition(uint16_t startPosition, uint16_t endPosition) {
    uint16_t sampleSize = endPosition;
    
    for (uint16_t i = 0; i < sampleSize; i++) {
        if (startPosition < sizeof(chirp)) // if position is within sample size
        {
            uint8_t sampleValue = pgm_read_byte_near(chirp + startPosition); // read next sample value from PROGMEM

            // fold effect
            if(foldWave){
                sampleValue = (128 - sampleValue) * 2; // invert the sample value
            }
            
            sampleSize--;
            if (sampleSize <= 0 || !(PINB & (1<<PINB2))) // if trigger is released or sample is finished playing
            {
                break; // stop playing sample
            }
            startPosition++;
            writeRingBuffer(sampleValue);
        }
    }
    resetRingBuffer();
}

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

// This is the interrupt service routine for Timer0 compare match A
// The purpose of this ISR is to output the samples from the ringbuffer to the PWM
ISR(TIMER0_COMPA_vect) {    
    if (ringCount) {                             //If entry in FIFO
      OCR1A = ringbuffer[(ringRead++)];          //Output 8-bit DAC
      ringCount--; // decrement ringbuffer count
    }
}